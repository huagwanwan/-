

#include "stdafx.h"

#include <iostream>
#include <cmath>
#include <vector>
#include <ctime>
#include <fstream>
#include <string>
#include <io.h>

using namespace std;
typedef unsigned int uint;
char * filepath = "D:\\features";



struct Cluster
{
	vector<float> centroid;
	vector<uint> samples;
};
float cal_distance(vector<float> a, vector<float> b)
{
	uint da = a.size();
	uint db = b.size();
	if (da != db) cerr << "Dimensions of two vectors must be same!!\n";
	float val = 0.0;
	for (uint i = 0; i < da; i++)
	{
		val += pow((a[i] - b[i]), 2);
	}
	return pow(val, 0.5);
}
vector<Cluster> k_means(vector<vector<float> > trainX, uint k, uint maxepoches)
{
	const uint row_num = trainX.size();
	const uint col_num = trainX[0].size();
	cout << "row=" << row_num << endl;
	cout << "col=" << col_num << endl;
	/*初始化聚类中心*/
	vector<Cluster> clusters(k);
	uint seed = (uint)time(NULL);
	cout <<"seed="<<seed << endl;
	
	for (uint i = 0; i < k; i++)
	{
		srand(seed);
		int c = rand() % row_num;
		clusters[i].centroid = trainX[c];
		seed = rand();
	}

	/*多次迭代直至收敛，本次试验迭代100次*/
	for (uint it = 0; it < maxepoches; it++)
	{
		/*每一次重新计算样本点所属类别之前，清空原来样本点信息*/
		for (uint i = 0; i < k; i++)
		{
			clusters[i].samples.clear();
		}
		/*求出每个样本点距应该属于哪一个聚类*/
		for (uint j = 0; j < row_num; j++)
		{
			/*都初始化属于第0个聚类*/
			uint c = 0;
			float min_distance = cal_distance(trainX[j], clusters[c].centroid);
			for (uint i = 1; i < k; i++)
			{
				float distance = cal_distance(trainX[j], clusters[i].centroid);
				if (distance < min_distance)
				{
					min_distance = distance;
					c = i;
				}
			}
			clusters[c].samples.push_back(j);
		}

		/*更新聚类中心*/
		for (uint i = 0; i < k; i++)
		{
			vector<float> val(col_num, 0.0);
			for (uint j = 0; j < clusters[i].samples.size(); j++)
			{
				uint sample = clusters[i].samples[j];
				for (uint d = 0; d < col_num; d++)
				{
					val[d] += trainX[sample][d];
					if (j == clusters[i].samples.size() - 1)
						clusters[i].centroid[d] = val[d] / clusters[i].samples.size();
				}
			}
		}
	}
	return clusters;

}

void getFiles(string path, vector<string>& files)
{
	//文件句柄  
	long   hFile = 0;
	//文件信息  
	struct _finddata_t fileinfo;
	string p;
	if ((hFile = _findfirst(p.assign(path).append("\\*").c_str(), &fileinfo)) != -1)
	{
		do
		{
			//如果是目录,迭代之  
			//如果不是,加入列表  
			if ((fileinfo.attrib &  _A_SUBDIR))
			{
				if (strcmp(fileinfo.name, ".") != 0 && strcmp(fileinfo.name, "..") != 0)
					getFiles(p.assign(path).append("\\").append(fileinfo.name), files);
			}
			else
			{
				files.push_back(p.assign(path).append("\\").append(fileinfo.name));
			}
		} while (_findnext(hFile, &fileinfo) == 0);
		_findclose(hFile);
	}
}

int main()
{
	vector<vector<float> > trainX(4338, vector<float>(1024, 0));

	vector<string> files;
	getFiles(filepath, files);

	int size = files.size();

	//vector<float*> trainX;
	cout << "size= " << size << std::endl;
	for (int i = 0; i < size; i++)
	{
		float nNum[1024];

		//cout <<"filename="<< files[i].c_str() << endl;
		ifstream fin(files[i].c_str(), ios::binary);
		if (!fin)
		{
			cerr << "open error!" << endl;
			abort();
		}
		fin.read((char*)nNum, sizeof(float)* 1024);
		for (int j = 0; j < 1024; j++)
		{
			float n;
			n = nNum[j];
			trainX[i].at(j) = n;

		}

		//cout << nNum[1] << endl;

		//trainX[i].push_back(nNum);

	}



	/*对9个数据{1 2 3 11 12 13 21 22 23}聚类
	float data = 1.0;
	for (uint i = 0; i < 9; i++)
	{
	trainX[i][0] = data;
	if ((i + 1) % 3 == 0) data += 8;
	else data++;
	}*/
	/*int nNum;
	char szBuf[1024];
	fin.read((char*)&nNum, sizeof(int)* 1024);
	fin.read(szBuf, sizeof(char)* 10);
	std::cout << "int = " << nNum << std::endl;
	//std::cout << "str = " << szBuf << std::endl;
	fin.close();*/





	/*k-means聚类*/
	vector<Cluster> clusters_out = k_means(trainX, 9, 1000);

	/*输出分类结果*/
	for (uint i = 0; i < clusters_out.size(); i++)
	{
		cout << "Cluster " << i << " :" << endl;
	}

	/*子类中心*/
	cout << "\t" << "Centroid: " << "\n\t\t[ ";
	for (uint j = 0; j < clusters_out[i].centroid.size(); j++)
	{
		cout << clusters_out[i].centroid[j] << " ";
	}
	cout << "]" << endl;

	/*子类样本点*/
	cout << "\t" << "Samples:\n";
	for (uint k = 0; k < clusters_out[i].samples.size(); k++)
	{
		uint c = clusters_out[i].samples[k];
		cout << "\t\t[ ";
		for (uint m = 0; m < 1024; m++)
		{
			cout << trainX[c][m] << " ";
		}
		cout << "]\n";
	}
	return 0;
}

